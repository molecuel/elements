{"version":3,"sources":["index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;AACb,MAAO,OAAO,WAAW,SAAS,CAAC,CAAC;AACpC,MAAO,aAAa,WAAW,eAAe,CAAC,CAAC;AAChD,QAAO,kBAAkB,CAAC,CAAA;AAC1B,MAAY,GAAG,WAAM,YAAY,CAAC,CAAA;AAElC,iCAA+B,0BAA0B,CAAC,CAAA;AAE1D,wBAAmC,mBAAmB,CAAC;AAA9C,oCAA8C;AAGvD;IAWE,YAAY,IAAU,EAAE,MAAY;QAClC,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;QAE9B,IAAI,CAAC,cAAc,GAAG,IAAI,+BAAc,EAAE,CAAC;QAC3C,IAAI,CAAC,cAAc,CAAC,GAAG,GAAG,uBAAuB,CAAC;QAClD,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,OAAO,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG,IAAI,CAAC;QAEnC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,aAAa,GAAG,IAAI,aAAa,CAAC,MAAM,CAAC;YAC5C,IAAI,EAAE,gBAAgB;YACtB,GAAG,EAAE,OAAO;SACb,CAAC,CAAC;IACL,CAAC;IAMS,mBAAmB;QAC3B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,2EAA2E,EAAE,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC;IAC5I,CAAC;IAMe,YAAY;;YAC1B,IAAI,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC1D,CAAC;KAAA;IAMS,qBAAqB;QAC7B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;YAC7B,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO;YAC3C,KAAK,EAAE,eAAe;SACvB,CAAC,CAAC;IACL,CAAC;IAMe,cAAc;;YAC5B,IAAI,CAAC,iBAAiB,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC9D,CAAC;KAAA;IAMY,OAAO;;YAClB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5B,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAC5B,CAAC;KAAA;IAOM,aAAa,CAAC,IAAY,EAAE,UAAe;QAChD,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC1C,CAAC;IAOM,QAAQ,CAAC,IAAY;QAC1B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAOM,gBAAgB,CAAC,IAAY;QAClC,IAAI,YAAY,GAAQ,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpD,IAAI,aAAa,GAAa,IAAI,YAAY,EAAE,CAAC;QACjD,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC/B,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;IAOM,QAAQ,CAAC,QAAgB;QAC9B,IAAI,SAAS,GAAG,IAAI,GAAG,CAAC,SAAS,EAAE,CAAC;QACpC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;AACH,CAAC;AA7Ge,sBAAa,GAAG,CAAC,CAAC;AADrB,gBAAQ,WA8GpB,CAAA","file":"index.js","sourcesContent":["'use strict';\r\nimport mongodb = require('mongodb');\r\nimport elasticsearch = require('elasticsearch');\r\nimport 'reflect-metadata';\r\nimport * as TSV from 'tsvalidate';\r\n\r\nimport { ElasticOptions } from './classes/ElasticOptions';\r\nimport { IElement } from './interfaces/IElement';\r\nexport { Element as Element } from './classes/Element';\r\n\r\n\r\nexport class Elements {\r\n  public static loaderversion = 2;\r\n\r\n  private mongoClient: mongodb.MongoClient;\r\n  private mongoConnection: Promise<mongodb.Db>;\r\n  private elasticClient: elasticsearch.Client;\r\n  private elasticConnection: PromiseLike<elasticsearch.Client>;\r\n\r\n  private elasticOptions: ElasticOptions;\r\n  private elementStore: Map<string, IElement>;\r\n\r\n  constructor(mlcl?: any, config?: any) {\r\n    this.elementStore = new Map();\r\n    // @todo Get from config object\r\n    this.elasticOptions = new ElasticOptions();\r\n    this.elasticOptions.url = 'http://localhost:9200';\r\n    this.elasticOptions.loglevel = 'trace';\r\n    this.elasticOptions.timeout = 5000;\r\n\r\n    this.mongoClient = mongodb.MongoClient;\r\n    this.elasticClient = new elasticsearch.Client({\r\n      host: 'localhost:9200',\r\n      log: 'trace'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Wrapper for mongodb to return a promise needed by the async function\r\n   * @return {Promise<any>} [Returns the connection promise]\r\n   */\r\n  protected mongoConnectWrapper(): Promise<any> {\r\n    return this.mongoClient.connect('mongodb://localhost/elements?connectTimeoutMS=10000&socketTimeoutMS=10000', { promiseLibrary: Promise });\r\n  }\r\n\r\n  /**\r\n   * Async function for the mongo database connection\r\n   * @return {[type]} [description]\r\n   */\r\n  protected async connectMongo(): Promise<void> {\r\n    this.mongoConnection = await this.mongoConnectWrapper();\r\n  }\r\n\r\n  /**\r\n   * Return the elasticsearch connection\r\n   * @return {PromiseLike<any>} [description]\r\n   */\r\n  protected elasticConnectWrapper(): PromiseLike<any> {\r\n    return this.elasticClient.ping({\r\n      requestTimeout: this.elasticOptions.timeout,\r\n      hello: 'elasticsearch'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Async elasticsearch connection function\r\n   * @return {Promise<void>} [Return the promise for the elasticsearch connection]\r\n   */\r\n  protected async connectElastic(): Promise<void> {\r\n    this.elasticConnection = await this.elasticConnectWrapper();\r\n  }\r\n\r\n  /**\r\n   * Connect function to initialize the database connections to elastic and mongodb\r\n   * @return {[Promise]}\r\n   */\r\n  public async connect(): Promise<void> {\r\n    await this.connectElastic();\r\n    await this.connectMongo();\r\n  }\r\n\r\n  /**\r\n   * Register a class instance\r\n   * @param {string} name       [description]\r\n   * @param {any}    definition [description]\r\n   */\r\n  public registerClass(name: string, definition: any): void {\r\n    definition.elements = this;\r\n    this.elementStore.set(name, definition);\r\n  }\r\n\r\n  /**\r\n   * Get a registered class\r\n   * @param  {string}   name [description]\r\n   * @return {IElement}      [description]\r\n   */\r\n  public getClass(name: string): IElement {\r\n    return this.elementStore.get(name);\r\n  }\r\n\r\n  /**\r\n   * Return a class instance\r\n   * @param  {string}   name [description]\r\n   * @return {IElement}      [description]\r\n   */\r\n  public getClassInstance(name: string): any {\r\n    let elementClass: any = this.elementStore.get(name);\r\n    let classInstance: IElement = new elementClass();\r\n    classInstance.setFactory(this);\r\n    return classInstance;\r\n  }\r\n\r\n  /**\r\n   * Validator function for the instances\r\n   * @param  {IElement}      instance [description]\r\n   * @return {Promise<void>}          [description]\r\n   */\r\n  public validate(instance: Object): TSV.IValidatorError[] {\r\n    let validator = new TSV.Validator();\r\n    return validator.validate(instance);\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}
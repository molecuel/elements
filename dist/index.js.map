{"version":3,"sources":["index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;AACb,MAAO,OAAO,WAAW,SAAS,CAAC,CAAC;AACpC,MAAO,aAAa,WAAW,eAAe,CAAC,CAAC;AAChD,QAAO,kBAAkB,CAAC,CAAA;AAE1B,iCAA6B,0BAA0B,CAAC,CAAA;AAExD,wBAAiC,mBAAmB,CAAC;AAA7C,oCAA6C;AAGrD;IAaE,YAAY,IAAU,EAAE,MAAY;QAClC,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;QAE9B,IAAI,CAAC,cAAc,GAAG,IAAI,+BAAc,EAAE,CAAC;QAC3C,IAAI,CAAC,cAAc,CAAC,GAAG,GAAG,uBAAuB,CAAC;QAClD,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,OAAO,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG,IAAI,CAAC;QAEnC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,aAAa,GAAG,IAAI,aAAa,CAAC,MAAM,CAAC;YAC5C,IAAI,EAAE,gBAAgB;YACtB,GAAG,EAAE,OAAO;SACb,CAAC,CAAC;IACL,CAAC;IAMS,mBAAmB;QAC3B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,2EAA2E,EAAE,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC;IAC5I,CAAC;IAMe,YAAY;;YAC1B,IAAI,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC1D,CAAC;KAAA;IAMS,qBAAqB;QAC7B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;YAC7B,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO;YAC3C,KAAK,EAAE,eAAe;SACvB,CAAC,CAAC;IACL,CAAC;IAMe,cAAc;;YAC5B,IAAI,CAAC,iBAAiB,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC9D,CAAC;KAAA;IAMY,OAAO;;YAClB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5B,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAC5B,CAAC;KAAA;IAOM,aAAa,CAAC,IAAY,EAAE,UAAe;QAChD,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC1C,CAAC;IAOM,QAAQ,CAAC,IAAY;QAC1B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAOM,gBAAgB,CAAC,IAAY;QAClC,IAAI,YAAY,GAAQ,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpD,IAAI,aAAa,GAAa,IAAI,YAAY,EAAE,CAAC;QACjD,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC9B,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;IAOY,QAAQ,CAAC,QAAkB;;YACtC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACpC,CAAC;KAAA;AACH,CAAC;AA9Ge,sBAAa,GAAG,CAAC,CAAC;AADrB,gBAAQ,WA+GpB,CAAA","file":"index.js","sourcesContent":["'use strict';\nimport mongodb = require('mongodb');\nimport elasticsearch = require('elasticsearch');\nimport 'reflect-metadata';\n\nimport {ElasticOptions} from './classes/ElasticOptions';\nimport {IElement} from './interfaces/IElement';\nexport {Element as Element} from './classes/Element';\nimport {Validator} from 'class-validator';\n\nexport class Elements {\n  public static loaderversion = 2;\n\n  private mongoClient: mongodb.MongoClient;\n  private mongoConnection: Promise<mongodb.Db>;\n  private elasticClient: elasticsearch.Client;\n  private elasticConnection: PromiseLike<elasticsearch.Client>;\n\n  private elasticOptions: ElasticOptions;\n  private elementStore: Map<string, IElement>;\n\n  private validator: Validator;\n\n  constructor(mlcl?: any, config?: any) {\n    this.elementStore = new Map();\n    // @todo Get from config object\n    this.elasticOptions = new ElasticOptions();\n    this.elasticOptions.url = 'http://localhost:9200';\n    this.elasticOptions.loglevel = 'trace';\n    this.elasticOptions.timeout = 5000;\n\n    this.mongoClient = mongodb.MongoClient;\n    this.elasticClient = new elasticsearch.Client({\n      host: 'localhost:9200',\n      log: 'trace'\n    });\n  }\n\n  /**\n   * Wrapper for mongodb to return a promise needed by the async function\n   * @return {Promise<any>} [Returns the connection promise]\n   */\n  protected mongoConnectWrapper(): Promise<any> {\n    return this.mongoClient.connect('mongodb://localhost/elements?connectTimeoutMS=10000&socketTimeoutMS=10000', { promiseLibrary: Promise });\n  }\n\n  /**\n   * Async function for the mongo database connection\n   * @return {[type]} [description]\n   */\n  protected async connectMongo(): Promise<void> {\n    this.mongoConnection = await this.mongoConnectWrapper();\n  }\n\n  /**\n   * Return the elasticsearch connection\n   * @return {PromiseLike<any>} [description]\n   */\n  protected elasticConnectWrapper(): PromiseLike<any> {\n    return this.elasticClient.ping({\n      requestTimeout: this.elasticOptions.timeout,\n      hello: 'elasticsearch'\n    });\n  }\n\n  /**\n   * Async elasticsearch connection function\n   * @return {Promise<void>} [Return the promise for the elasticsearch connection]\n   */\n  protected async connectElastic(): Promise<void> {\n    this.elasticConnection = await this.elasticConnectWrapper();\n  }\n\n  /**\n   * Connect function to initialize the database connections to elastic and mongodb\n   * @return {[Promise]}\n   */\n  public async connect(): Promise<void> {\n    await this.connectElastic();\n    await this.connectMongo();\n  }\n\n  /**\n   * Register a class instance\n   * @param {string} name       [description]\n   * @param {any}    definition [description]\n   */\n  public registerClass(name: string, definition: any): void {\n    definition.elements = this;\n    this.elementStore.set(name, definition);\n  }\n\n  /**\n   * Get a registered class\n   * @param  {string}   name [description]\n   * @return {IElement}      [description]\n   */\n  public getClass(name: string): IElement {\n    return this.elementStore.get(name);\n  }\n\n  /**\n   * Return a class instance\n   * @param  {string}   name [description]\n   * @return {IElement}      [description]\n   */\n  public getClassInstance(name: string): any {\n    let elementClass: any = this.elementStore.get(name);\n    let classInstance: IElement = new elementClass();\n    classInstance.elements = this;\n    return classInstance;\n  }\n\n  /**\n   * Validator function for the instances\n   * @param  {IElement}      instance [description]\n   * @return {Promise<void>}          [description]\n   */\n  public async validate(instance: IElement): Promise<void> {\n    this.validator.validate(instance);\n  }\n}\n"],"sourceRoot":"/source/"}
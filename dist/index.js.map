{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\r\nimport mongodb = require('mongodb');\r\nimport elasticsearch = require('elasticsearch');\r\nimport 'reflect-metadata';\r\nimport * as _ from 'lodash';\r\nimport * as TSV from 'tsvalidate';\r\n\r\nimport * as ELD from './customDecorators';\r\nimport { ElasticOptions } from './classes/ElasticOptions';\r\nimport { IElement } from './interfaces/IElement';\r\nimport { IDocuments } from './interfaces/IDocuments';\r\n// import { Element } from './classes/Element';\r\nexport { Element as Element } from './classes/Element';\r\n\r\n\r\nexport class Elements {\r\n  public static loaderversion = 2;\r\n\r\n  private mongoClient: mongodb.MongoClient;\r\n  private mongoConnection: Promise<mongodb.Db>;\r\n  private elasticClient: elasticsearch.Client;\r\n  private elasticConnection: PromiseLike<elasticsearch.Client>;\r\n  private elasticOptions: ElasticOptions;\r\n  private elementStore: Map<string, IElement>;\r\n\r\n  constructor(mlcl?: any, config?: any) {\r\n    this.elementStore = new Map();\r\n    // @todo Get from config object\r\n    this.elasticOptions = new ElasticOptions();\r\n    this.elasticOptions.url = 'http://localhost:9200';\r\n    this.elasticOptions.loglevel = 'trace';\r\n    this.elasticOptions.timeout = 5000;\r\n\r\n    this.mongoClient = mongodb.MongoClient;\r\n    this.elasticClient = new elasticsearch.Client({\r\n      host: 'localhost:9200',\r\n      log: 'trace'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Connect function to initialize the database connections to elastic and mongodb\r\n   * @return {[Promise]}\r\n   */\r\n  public async connect(): Promise<void> {\r\n    await this.connectElastic();\r\n    await this.connectMongo();\r\n  }\r\n\r\n  /**\r\n   * Register a class instance\r\n   * @param {string} name       [description]\r\n   * @param {any}    definition [description]\r\n   */\r\n  public registerClass(name: string, definition: any): void {\r\n    definition.elements = this;\r\n    this.elementStore.set(name, definition);\r\n  }\r\n\r\n  /**\r\n   * Get a registered class\r\n   * @param  {string}   name [description]\r\n   * @return {IElement}      [description]\r\n   */\r\n  public getClass(name: string): IElement {\r\n    return this.elementStore.get(name);\r\n  }\r\n\r\n  /**\r\n   * Return a class instance\r\n   * @param  {string}   name [description]\r\n   * @return {IElement}      [description]\r\n   */\r\n  public getClassInstance(name: string): any {\r\n    let elementClass: any = this.elementStore.get(name);\r\n    let classInstance: IElement = new elementClass();\r\n    classInstance.setFactory(this);\r\n    return classInstance;\r\n  }\r\n\r\n  /**\r\n   * Validator function for the instances\r\n   * @param  {IElement}      instance [description]\r\n   * @return {Promise<void>}          [description]\r\n   */\r\n  public validate(instance: Object): TSV.IValidatorError[] {\r\n    let validator = new TSV.Validator();\r\n    return validator.validate(instance);\r\n  }\r\n\r\n  /**\r\n   * Convert object which can be saved in database\r\n   * @param  {IElement} subElement [description]\r\n   * @return {any}                 [description]\r\n   */\r\n  public toDbObject(element: IElement): any {\r\n    return this.toDbObjRecursive(element, false);\r\n  }\r\n\r\n  /**\r\n   * Protected recursive object serialization\r\n   * @param  {Object}  obj     [description]\r\n   * @param  {boolean} nested  [description]\r\n   * @return any               [description]\r\n   */\r\n  protected toDbObjRecursive(obj: Object, nested: boolean): any {\r\n    let that = obj;\r\n    let result: any = {};\r\n    let objectValidatorDecorators = Reflect.getMetadata(TSV.METADATAKEY, that);\r\n    let propertiesValidatorDecorators = _.keyBy(objectValidatorDecorators, function(o: any) {\r\n      return o.property;\r\n    });\r\n    for (let key in that) {\r\n      // check for non-prototype, validator-decorated property\r\n      if (Object.hasOwnProperty.call(that, key)\r\n        && that[key] !== undefined\r\n        && propertiesValidatorDecorators[key]) {\r\n        // check for _id\r\n        if (key === '_id'\r\n          && !nested) {\r\n\r\n          result[key] = that[key];\r\n        }\r\n        // check if the property is an object\r\n        else if (typeof that[key] === 'object') {\r\n\r\n          result[key] = this.toDbObjRecursive(that[key], true);\r\n        }\r\n        else if (typeof that[key] !== 'function') {\r\n          result[key] = that[key];\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Close mongo connection\r\n   * @return {Promise<any>} [description]\r\n   */\r\n  public mongoClose(): Promise<any> {\r\n    return this.getMongoConnection().close();\r\n  }\r\n\r\n  /**\r\n   * Return the mongo connection\r\n   * @return {any} [description]\r\n   */\r\n  protected getMongoConnection(): any {\r\n    return this.mongoConnection;\r\n  }\r\n\r\n  /**\r\n   * Return the mongo connection\r\n   * @return {any} [description]\r\n   */\r\n  protected getElasticConnection(): any {\r\n    return this.elasticClient;\r\n  }\r\n\r\n  /**\r\n   * Get a specific mongo collection\r\n   * @return {Promise<any>} [description]\r\n   */\r\n  public async getMongoCollections(): Promise<any> {\r\n    return await this.getMongoConnection().collections();\r\n  }\r\n\r\n  /**\r\n   * Check object for defined IDocuments properties\r\n   * @param  {any}          obj   [description]\r\n   * @return {boolean}            [description]\r\n   */\r\n  public containsIDocuments(obj: any): boolean {\r\n    let template: IDocuments = {\r\n      collection: 'collectionName',\r\n      documents: []\r\n    };\r\n    for (let prop in template) {\r\n      if (!(prop in obj)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get documents based on query\r\n   * @param  {IElement}     model [description]\r\n   * @param  {any}          query [description]\r\n   * @return {Promise<any>}       [description]\r\n   */\r\n  public async findByQuery(collection: string | IElement, query?: any, limit?: number): Promise<any> {\r\n    let input: any = collection;\r\n    let collectionName: string;\r\n    if (typeof input === 'string') {\r\n      collectionName = input;\r\n    }\r\n    else if ('prototype' in input) {\r\n      collectionName = input.prototype.constructor.name;\r\n    }\r\n    else {\r\n      collectionName = input.constructor.name;\r\n    }\r\n    return await this.getMongoConnection().collection(collectionName).find(query).limit(limit || 0).toArray().then((res) => {\r\n      return this.toElementArray({ collection: collectionName, documents: res });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get Element based object from current Db and supplied collection by Id\r\n   * @param {number | string | IElement} id          [description]\r\n   * @param {string | IElement}          collection  [description]\r\n   * @return  [description]\r\n   */\r\n  public async findById(id: number | string | IElement, collection?: string | IElement): Promise<any> {\r\n    let inputColl: any = collection;\r\n    let inputId: any = id;\r\n    let collectionName: string;\r\n    if (typeof collection !== 'undefined') {\r\n      if (typeof inputColl === 'string') {\r\n        collectionName = inputColl;\r\n      }\r\n      else if ('prototype' in inputColl) {\r\n        collectionName = inputColl.prototype.constructor.name;\r\n      }\r\n      else {\r\n        collectionName = inputColl.constructor.name;\r\n      }\r\n    }\r\n    else if (typeof inputId !== 'number'\r\n      && typeof inputId !== 'string') {\r\n      if ('constructor' in inputId) {\r\n        collectionName = id.constructor.name;\r\n      }\r\n      if ('_id' in inputId) {\r\n        inputId = inputId._id;\r\n      }\r\n      else {\r\n        return Promise.reject(new Error('No valid id supplied.'));\r\n      }\r\n    }\r\n    return await this.findByQuery(collectionName, { _id: inputId }, 1);\r\n  }\r\n\r\n  /**\r\n   * Wrapper for mongodb to return a promise needed by the async function\r\n   * @return {Promise<any>} [Returns the connection promise]\r\n   */\r\n  protected mongoConnectWrapper(): Promise<any> {\r\n    return this.mongoClient.connect('mongodb://localhost/elements?connectTimeoutMS=10000&socketTimeoutMS=10000', { promiseLibrary: Promise });\r\n  }\r\n\r\n  /**\r\n   * Async function for the mongo database connection\r\n   * @return {[type]} [description]\r\n   */\r\n  protected async connectMongo(): Promise<void> {\r\n    this.mongoConnection = await this.mongoConnectWrapper();\r\n  }\r\n\r\n  /**\r\n   * Return the elasticsearch connection\r\n   * @return {PromiseLike<any>} [description]\r\n   */\r\n  protected elasticConnectWrapper(): PromiseLike<any> {\r\n    return this.elasticClient.ping({\r\n      requestTimeout: this.elasticOptions.timeout,\r\n      hello: 'elasticsearch'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Async elasticsearch connection function\r\n   * @return {Promise<void>} [Return the promise for the elasticsearch connection]\r\n   */\r\n  protected async connectElastic(): Promise<void> {\r\n    this.elasticConnection = await this.elasticConnectWrapper();\r\n  }\r\n\r\n  /**\r\n   * Bulk insert of mongodb documents\r\n   * @param  {Object[]}                            instances      [description]\r\n   * @param  {string}                              collectionName [description]\r\n   * @param  {mongodb.CollectionInsertManyOptions} options        [description]\r\n   * @return {Promise<any>}                                       [description]\r\n   */\r\n  protected async updateMongoElements(instances: IElement[], collectionName: string, upsert?: boolean): Promise<any> {\r\n    if (!upsert) {\r\n      upsert = false;\r\n    }\r\n    let bulk = await this.getMongoConnection().collection(collectionName).initializeUnorderedBulkOp();\r\n    _.each(instances, (instance) => {\r\n      if (upsert) {\r\n        bulk.find({ _id: instance._id }).upsert().updateOne(instance);\r\n      }\r\n      else {\r\n        bulk.find({ _id: instance._id }).updateOne(instance);\r\n      }\r\n    });\r\n    return await bulk.execute();\r\n  }\r\n\r\n  /**\r\n   * Insert single mongodb document\r\n   * @param  {Object}                             instance       [description]\r\n   * @param  {string}                             collectionName [description]\r\n   * @param  {mongodb.CollectionInsertOneOptions} options        [description]\r\n   * @return {Promise<any>}                                      [description]\r\n   */\r\n  protected async updateMongoElementSingle(instance: IElement, collectionName: string, upsert?: boolean): Promise<any> {\r\n    if (!upsert) {\r\n      upsert = false;\r\n    }\r\n    return await this.getMongoConnection().collection(collectionName).updateOne({ _id: instance._id }, instance, { upsert: upsert });\r\n  }\r\n\r\n  /**\r\n   * validate multiple instances of IElement\r\n   * @param  {IElement[]}   instances [Array of instances which implements IElement]\r\n   * @return {Promise<any>}           [description]\r\n   */\r\n  protected validateAndSort(instances: IElement[]): Promise<any> {\r\n    let errors: TSV.IValidatorError[] = [];\r\n    let collections: any = {};\r\n\r\n    // validate all instances and sort transformed objects into array based collections per model name;\r\n    for (let instance of instances) {\r\n\r\n      let metadata = Reflect.getMetadata(ELD.METADATAKEY, instance.constructor);\r\n      let collectionName: string = instance.constructor.name;\r\n      _.each(metadata, (entry) => {\r\n        if ('type' in entry\r\n          && entry.type === ELD.Decorators.USE_MONGO_COLLECTION\r\n          && 'value' in entry\r\n          && 'property' in entry\r\n          && entry.property === instance.constructor.name) {\r\n\r\n          collectionName = entry.value;\r\n        }\r\n      });\r\n      if (instance.validate().length === 0) {\r\n        if (!collections[collectionName]) {\r\n          collections[collectionName] = [instance.toDbObject()];\r\n        }\r\n        else {\r\n          collections[collectionName].push(instance.toDbObject());\r\n        }\r\n      }\r\n      else {\r\n        errors = errors.concat(instance.validate());\r\n      }\r\n    }\r\n    if (errors.length > 0) {\r\n      return Promise.reject(errors);\r\n    }\r\n    else {\r\n      return Promise.resolve(collections);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bulk update/upsert of elements into respective collection\r\n   * @param  {Object}                              collections [description]\r\n   * @param  {boolean}                             upsert      [description]\r\n   * @return {Promise<any>}                                    [description]\r\n   */\r\n  protected async mongoUpdate(collections: Object, upsert?: boolean): Promise<any> {\r\n    let result: any[] = [];\r\n    if (!upsert) {\r\n      upsert = false;\r\n    }\r\n    for (let collectionName in collections) {\r\n      let collectionFullName: string = collectionName;\r\n      let prom = await this.updateMongoElements(collections[collectionName], collectionFullName, upsert);\r\n      result.push({ [collectionName]: prom });\r\n    }\r\n    return Promise.resolve(result);\r\n  }\r\n\r\n  /**\r\n   * Wrapper for instance save\r\n   * @param  {IElement[]}                          instances [description]\r\n   * @param  {boolean}                             upsert    [description]\r\n   * @return {Promise<any>}                                  [description]\r\n   */\r\n  public saveInstances(instances: IElement[], upsert?: boolean): Promise<any> {\r\n    if (!upsert) {\r\n      upsert = false;\r\n    }\r\n    if (instances.length === 1) {\r\n      if (instances[0].validate().length > 0) {\r\n        return Promise.reject(instances[0].validate());\r\n      }\r\n      else {\r\n        return this.updateMongoElementSingle(\r\n          instances[0].toDbObject(),\r\n          instances[0].constructor.name,\r\n          upsert).then((res) => {\r\n            return [{ result: res.result, ops: res.ops, upsertedCount: res.upsertedCount, upsertedId: res.upsertedId }];\r\n          });\r\n      }\r\n    }\r\n    else {\r\n      return this.validateAndSort(instances).then((res) => {\r\n        return this.mongoUpdate(res, upsert);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert document search result to array of Element objects\r\n   * @param  {IDocuments}   collection [description]\r\n   * @return {Promise<any>}            [description]\r\n   */\r\n  protected toElementArray(collection: IDocuments): Promise<any> {\r\n    let that: any = this;\r\n    let result: any[] = [];\r\n    if (that.containsIDocuments(collection)) {\r\n      // build array of collection based elements\r\n      for (let i = 0; i < collection.documents.length; i++) {\r\n        let currDoc: any = collection.documents[i];\r\n        result.push(that.getClassInstance(collection.collection.toString().toLowerCase()));\r\n        for (let key in currDoc) {\r\n          result[i][key] = currDoc[key];\r\n        }\r\n      }\r\n      return Promise.resolve(result);\r\n    }\r\n    else {\r\n      return Promise.reject(new Error('Could not determine class'));\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}
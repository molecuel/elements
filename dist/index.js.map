{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\r\nimport 'reflect-metadata';\r\nimport * as _ from 'lodash';\r\nimport * as TSV from 'tsvalidate';\r\n\r\nimport * as ELD from './classes/ElementDecorators';\r\nimport * as Interfaces from './Interfaces';\r\nimport { Element } from './classes/Element';\r\nexport { Element as Element } from './classes/Element';\r\n// @todo: export all decorators in single accessor\r\n\r\nexport class Elements {\r\n  public static loaderversion = 2;\r\n\r\n  private elementStore: Map<string, Interfaces.IElement>;\r\n  private databases: Map<string, Interfaces.IDatabaseAdapter>;\r\n\r\n  constructor(mlcl?: any, config?: any) {\r\n    this.elementStore = new Map();\r\n    this.databases = new Map();\r\n  }\r\n\r\n  /**\r\n   * Register a database instance\r\n   * @param {string} key       [description]\r\n   * @param {any}    database  [description]\r\n   */\r\n  public async registerDatabase(key: string, database: any): Promise<void> {\r\n    this.databases.set(key, database);\r\n  }\r\n\r\n  /**\r\n   * Register a class instance\r\n   * @param {string} name       [description]\r\n   * @param {any}    definition [description]\r\n   */\r\n  public async registerClass(name: string, definition: any, registerAsModel?: boolean): Promise<void> {\r\n    if (!registerAsModel) {\r\n      registerAsModel = false; // ES6 default value failing in CI\r\n    }\r\n    definition.elements = this;\r\n    this.elementStore.set(name, definition);\r\n    if(registerAsModel) {\r\n      for (let [key, database] of this.databases) {\r\n        database.register(this.getClassInstance(name)); // instance or model??\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a registered class\r\n   * @param  {string}   name [description]\r\n   * @return {Interfaces.Interfaces.IElement}      [description]\r\n   */\r\n  public getClass(name: string): Interfaces.IElement {\r\n    return this.elementStore.get(name);\r\n  }\r\n\r\n  /**\r\n   * Return a class instance\r\n   * @param  {string}   name [description]\r\n   * @return {Interfaces.IElement}      [description]\r\n   */\r\n  public getClassInstance(name: string): any {\r\n    let elementClass: any = this.elementStore.get(name);\r\n    let classInstance: Interfaces.IElement = new elementClass();\r\n    classInstance.setFactory(this);\r\n    return classInstance;\r\n  }\r\n\r\n  /**\r\n   * Validator function for the instances\r\n   * @param  {Interfaces.IElement}      instance [description]\r\n   * @return {Promise<void>}          [description]\r\n   */\r\n  public validate(instance: Object): TSV.IValidatorError[] {\r\n    let validator = new TSV.Validator();\r\n    return validator.validate(instance);\r\n  }\r\n\r\n  /**\r\n   * Convert object which can be saved in database\r\n   * @param  {Interfaces.IElement} element [description]\r\n   * @return {any}                 [description]\r\n   */\r\n  public toDbObject(element: Interfaces.IElement): any {\r\n    return this.toDbObjRecursive(element, false);\r\n  }\r\n\r\n  /**\r\n   * Protected recursive object serialization\r\n   * @param  {Object}  obj     [description]\r\n   * @param  {boolean} nested  [description]\r\n   * @return any               [description]\r\n   */\r\n  protected toDbObjRecursive(obj: Object, nested: boolean): any {\r\n    let that = obj;\r\n    let result: any = {};\r\n    let objectValidatorDecorators = Reflect.getMetadata(TSV.METADATAKEY, that);\r\n    let propertiesValidatorDecorators = _.keyBy(objectValidatorDecorators, function(o: any) {\r\n      return o.property;\r\n    });\r\n    for (let key in that) {\r\n      // check for non-prototype, validator-decorated property\r\n      if (Object.hasOwnProperty.call(that, key)\r\n        && that[key] !== undefined\r\n        && propertiesValidatorDecorators[key]) {\r\n        // @todo: use key from IDatabaseAdapter\r\n        // check for _id\r\n        if (key === '_id'\r\n          && !nested) {\r\n\r\n          result[key] = that[key];\r\n        }\r\n        // check if the property is an object\r\n        else if (typeof that[key] === 'object') {\r\n\r\n          result[key] = this.toDbObjRecursive(that[key], true);\r\n        }\r\n        else if (typeof that[key] !== 'function') {\r\n\r\n          result[key] = that[key];\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Check object for defined IDocuments properties\r\n   * @param  {any}          obj   [description]\r\n   * @return {boolean}            [description]\r\n   */\r\n  protected containsIDocuments(obj: any): boolean {\r\n    let template: Interfaces.IDocuments = {\r\n      collection: 'collectionName',\r\n      documents: []\r\n    };\r\n    for (let prop in template) {\r\n      if (!(prop in obj)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * validate multiple instances of Interfaces.IElement\r\n   * @param  {Interfaces.IElement[]}   instances [Array of instances which implements Interfaces.IElement]\r\n   * @return {Promise<any>}                      [description]\r\n   */\r\n  protected validateAndSort(instances: Interfaces.IElement[]): Promise<any> {\r\n    let errors: TSV.IValidatorError[] = [];\r\n    let collections: any = {};\r\n\r\n    // validate all instances and sort transformed objects into array based collections per model name;\r\n    for (let instance of instances) {\r\n      // get the metadata - ELD.METADATAKEY is defined in elementDecorators.ts\r\n      let metadata = Reflect.getMetadata(ELD.METADATAKEY, instance.constructor);\r\n      let collectionName: string = instance.constructor.name;\r\n      _.each(metadata, (entry) => {\r\n        if ('type' in entry\r\n          && entry.type === ELD.Decorators.USE_PERSISTANCE_TABLE\r\n          && 'value' in entry\r\n          && 'property' in entry\r\n          && entry.property === instance.constructor.name) {\r\n\r\n          collectionName = entry.value;\r\n        }\r\n      });\r\n      if (instance.validate().length === 0) {\r\n        if (!collections[collectionName]) {\r\n          collections[collectionName] = [instance.toDbObject()];\r\n        }\r\n        else {\r\n          collections[collectionName].push(instance.toDbObject());\r\n        }\r\n      }\r\n      else {\r\n        errors = errors.concat(instance.validate());\r\n      }\r\n    }\r\n    if (errors.length > 0) {\r\n      return Promise.reject(errors);\r\n    }\r\n    else {\r\n      return Promise.resolve(collections);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Wrapper for instance save\r\n   * @param  {Interfaces.IElement[]}                          instances [description]\r\n   * @param  {boolean}                             upsert    [description]\r\n   * @return {Promise<any>}                                  [description]\r\n   */\r\n  public async saveInstances(instances: Interfaces.IElement[], upsert: boolean = false): Promise<any> {\r\n    // check if there is only one instance \r\n    if (instances.length === 1) {\r\n      // check if there were errors on validation\r\n      if (instances[0].validate().length > 0) {\r\n        return Promise.reject(instances[0].validate());\r\n      } else {\r\n        let metadata = Reflect.getMetadata(ELD.METADATAKEY, instances[0].constructor);\r\n        let collectionName: string = instances[0].constructor.name;\r\n        _.each(metadata, (entry) => {\r\n          if ('type' in entry\r\n            && entry.type === ELD.Decorators.USE_PERSISTANCE_TABLE\r\n            && 'value' in entry\r\n            && 'property' in entry\r\n            && entry.property === instances[0].constructor.name) {\r\n\r\n            collectionName = entry.value;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    else {\r\n      return this.validateAndSort(instances).then((res) => {\r\n        // @todo: save all to databases\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build Mapping for index based on applied decorators\r\n   * @param  {any}     model  [description]\r\n   * @return {Object}         [description]\r\n   */\r\n  protected getMappingProperties(model: any): Object {\r\n    let result = {};\r\n    let propertyDecorators: any[] = _.concat(Reflect.getMetadata(TSV.METADATAKEY, new model()), Reflect.getMetadata(ELD.METADATAKEY, new model()));\r\n    _.each(propertyDecorators, (decorator) => {\r\n      if (decorator && _.find(propertyDecorators, function(checkedDecorator: any) {\r\n        return (checkedDecorator\r\n          && checkedDecorator.property === decorator.property\r\n          && checkedDecorator.type === ELD.Decorators.INDEX_MAPPING\r\n          && checkedDecorator.property !== model.name\r\n          && checkedDecorator.property !== '_id');\r\n      }) && !_.find(propertyDecorators, function(checkedDecorator: any) {\r\n        return (checkedDecorator\r\n          && checkedDecorator.property === decorator.property\r\n          && checkedDecorator.type === ELD.Decorators.NOT_FOR_POPULATION\r\n          && checkedDecorator.property !== model.name\r\n          && checkedDecorator.property !== '_id');\r\n      })) {\r\n        if (!result['properties']) {\r\n          result = { properties: {} };\r\n        }\r\n        if (_.find(propertyDecorators, (checkedDecorator) => {\r\n          return (checkedDecorator\r\n            && checkedDecorator.property === decorator.property\r\n            && checkedDecorator.type === TSV.DecoratorTypes.NESTED);\r\n        })) {\r\n          result['properties'][decorator.property] = this.getMappingProperties(Reflect.getMetadata('design:type', new model(), decorator.property));\r\n        }\r\n        else if (!result['properties'][decorator.property]) {\r\n          result['properties'][decorator.property] = { type: _.get(this.getPropertyType(model, decorator.property, propertyDecorators), decorator.property) };\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Return an object with the Elasticsearch required type for any property\r\n   * @param  {any}    model       [description]\r\n   * @param  {string} property    [description]\r\n   * @param  {any}    decorators  [description]\r\n   * @return {Object}             [description]\r\n   */\r\n  protected getPropertyType(model: any, property: string, decorators: any): Object {\r\n    let result = {};\r\n    _.each(decorators, (decorator) => {\r\n      if (decorator && !result[property]\r\n        && decorator.property === property) {\r\n\r\n        switch (decorator.type) {\r\n          case TSV.DecoratorTypes.IS_INT:\r\n            result[property] = 'integer';\r\n            break;\r\n          case TSV.DecoratorTypes.IS_FLOAT:\r\n          case TSV.DecoratorTypes.IS_DECIMAL:\r\n            result[property] = 'float';\r\n            break;\r\n          case TSV.DecoratorTypes.IP_ADDRESS:\r\n          case TSV.DecoratorTypes.MAC_ADDRESS:\r\n          case TSV.DecoratorTypes.EMAIL:\r\n          case TSV.DecoratorTypes.ALPHA:\r\n            result[property] = 'string';\r\n            break;\r\n          case TSV.DecoratorTypes.DATE:\r\n          case TSV.DecoratorTypes.DATE_AFTER:\r\n          case TSV.DecoratorTypes.DATE_BEFORE:\r\n          case TSV.DecoratorTypes.DATE_ISO8601:\r\n            result[property] = 'date';\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    if (!result[property]) {\r\n      switch (Reflect.getMetadata('design:type', new model(), property).name) {\r\n        // declared type: string\r\n        case 'String':\r\n          result[property] = 'string';\r\n          break;\r\n        // declared type: number\r\n        case 'Number':\r\n          result[property] = 'integer';\r\n          break;\r\n        // declared type: boolean\r\n        case 'Boolean':\r\n          result[property] = 'boolean';\r\n          break;\r\n        // declared type: any\r\n        case 'Object':\r\n        // declared type: object\r\n        default:\r\n          result[property] = 'object';\r\n          break;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n"]}
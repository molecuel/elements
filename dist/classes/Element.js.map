{"version":3,"sources":["classes/Element.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AACb,QAAO,kBAAkB,CAAC,CAAA;AAI1B,MAAO,CAAC,WAAW,QAAQ,CAAC,CAAC;AAE7B;IACE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACpB,MAAM,CAAC,UAAS,MAAW;QACzB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC,CAAC;AACJ,CAAC;AAGD;;IAIS,WAAW;QAChB,MAAM,CAAC,SAAO,CAAC,QAAQ,CAAC;IAC1B,CAAC;IACM,UAAU,CAAC,QAAQ;QACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IACM,QAAQ;QACb,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IACM,UAAU,CAAC,UAAgB;QAChC,IAAI,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAGhD,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YAErB,IAAI,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;YACtE,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;YAC5B,CAAC;YAED,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;YAE9D,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,SAAS;gBACzB,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACzC,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;gBACvD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC;QACH,CAAC;QAGD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AAvCD;IAAC,GAAG,EAAE;;WAAA;AACO,eAAO,UAsCnB,CAAA","file":"classes/Element.js","sourcesContent":["'use strict';\r\nimport 'reflect-metadata';\r\nimport { Elements } from '../index';\r\nimport { IElement } from '../interfaces/IElement';\r\nimport { IValidatorError, IsDefined } from 'tsvalidate';\r\nimport _ = require('lodash');\r\n\r\nfunction val() {\r\n  console.log('koko');\r\n  return function(target: any) {\r\n    console.log('gere');\r\n  };\r\n}\r\n\r\n@val()\r\nexport class Element implements IElement {\r\n  public _id: any;\r\n  public elements: Elements;\r\n  public static elements: Elements;\r\n  public getElements(): Elements {\r\n    return Element.elements;\r\n  }\r\n  public setFactory(elements) {\r\n    this.elements = elements;\r\n  }\r\n  public validate(): IValidatorError[] {\r\n    return this.elements.validate(this);\r\n  }\r\n  public toDbObject(subElement?: any): any {\r\n    let that = _.clone(subElement) || _.clone(this);\r\n\r\n    // Object.keys(that).forEach((key) => {\r\n    for (let key in that) {\r\n      // check if the property is a reference\r\n      let isReference = Reflect.getMetadata('elements:modelref', that, key);\r\n      if (isReference && that[key] && that[key]._id) {\r\n        that[key] = that[key]._id;\r\n      }\r\n      // check if is defined\r\n      let isDefined = Reflect.getMetadata('design:type', that, key);\r\n      // console.log(key, isDefined);\r\n      if (that[key] !== undefined &&\r\n        typeof that[key] === 'object') {\r\n        that[key] = this.toDbObject(that[key]);\r\n      }\r\n      else if (!that[key] || typeof that[key] === 'function') {\r\n        delete that[key];\r\n      }\r\n    }\r\n\r\n    // });\r\n    return that;\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}
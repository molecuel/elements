{"version":3,"sources":["classes/Element.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AACb,QAAO,kBAAkB,CAAC,CAAA;AAG1B,6BAAuD,YAAY,CAAC,CAAA;AAGpE;IAOS,WAAW;QAChB,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;IAC1B,CAAC;IACM,UAAU,CAAC,QAAQ;QACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IACM,QAAQ;QACb,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IACM,IAAI;QACT,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7C,CAAC;IACM,UAAU,CAAC,UAAgB;QAChC,IAAI,IAAI,GAAG,UAAU,IAAI,IAAI,CAAC;QAC9B,IAAI,MAAM,GAAQ,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEtC,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,IAAI,qBAAqB,GAAG,OAAO,CAAC,WAAW,CAAC,uBAAuB,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;YAEpF,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC;mBAClC,IAAI,CAAC,GAAG,CAAC,KAAK,SAAS;mBACvB,OAAO,qBAAqB,KAAK,WAAW,CAAC,CAAC,CAAC;gBAGlD,EAAE,CAAC,CAAC,GAAG,KAAK,KAAK;uBACZ,OAAO,UAAU,KAAK,WAAW,CAAC,CAAC,CAAC;oBAEvC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC5C,CAAC;gBAED,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAEvC,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBACxD,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;oBACzC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC1B,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;AACH,CAAC;AAhDC;IAAC,yBAAY,EAAE;IAEd,oBAAO,EAAE;;oCAAA;AAHC,eAAO,UAiDnB,CAAA","file":"classes/Element.js","sourcesContent":["'use strict';\r\nimport 'reflect-metadata';\r\nimport { Elements } from '../index';\r\nimport { IElement } from '../interfaces/IElement';\r\nimport { IValidatorError, ValidateType, MongoID } from 'tsvalidate';\r\n// import _ = require('lodash');\r\n\r\nexport class Element implements IElement {\r\n  @ValidateType()\r\n  // @Equals(false)cd..\r\n  @MongoID()\r\n  public _id: any;\r\n  public elements: Elements;\r\n  public static elements: Elements;\r\n  public getElements(): Elements {\r\n    return Element.elements;\r\n  }\r\n  public setFactory(elements) {\r\n    this.elements = elements;\r\n  }\r\n  public validate(): IValidatorError[] {\r\n    return this.elements.validate(this);\r\n  }\r\n  public save(): Promise<any> {\r\n    return this.elements.saveInstances([this]);\r\n  }\r\n  public toDbObject(subElement?: any): any {\r\n    let that = subElement || this;\r\n    let result: any = Object.create(that);\r\n\r\n    for (let key in that) {\r\n      let hasValidatorDecorator = Reflect.getMetadata('tsvalidate:validators', that, key);\r\n      // check for non-prototype, validator-decorated property\r\n      if (({}).hasOwnProperty.call(that, key)\r\n        && that[key] !== undefined\r\n        && typeof hasValidatorDecorator !== 'undefined') {\r\n\r\n        // check for _id\r\n        if (key === '_id'\r\n          && typeof subElement === 'undefined') {\r\n\r\n          result[that.constructor.name] = that[key];\r\n        }\r\n        // check if the property is an object\r\n        else if (typeof that[key] === 'object') {\r\n\r\n          result[key] = Element.prototype.toDbObject(that[key]);\r\n        }\r\n        else if (typeof that[key] !== 'function') {\r\n          result[key] = that[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["classes/Element.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AACb,QAAO,kBAAkB,CAAC,CAAA;AAG1B,kCAAyC,iBAAiB,CAAC,CAAA;AAC3D,MAAO,CAAC,WAAW,QAAQ,CAAC,CAAC;AAE7B;IACE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACpB,MAAM,CAAC,UAAS,MAAW;QACzB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC,CAAA;AACH,CAAC;AAGD;;IAKS,WAAW;QAChB,MAAM,CAAC,SAAO,CAAC,QAAQ,CAAC;IAC1B,CAAC;IACM,UAAU,CAAC,QAAQ;QACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IACM,QAAQ;QACb,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IACM,UAAU;QACf,IAAI,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG;YAE5B,IAAI,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;YACtE,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;YAC5B,CAAC;YAED,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;YAC9D,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;YAC5B,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACf,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AA9BC;IAAC,2BAAS,EAAE;;oCAAA;AAFd;IAAC,GAAG,EAAE;;WAAA;AACO,eAAO,UA+BnB,CAAA","file":"classes/Element.js","sourcesContent":["'use strict';\nimport 'reflect-metadata';\nimport {Elements} from '../index';\nimport {IElement} from '../interfaces/IElement';\nimport {ValidationError, IsDefined} from 'class-validator';\nimport _ = require('lodash');\n\nfunction val() {\n  console.log('koko');\n  return function(target: any) {\n    console.log('gere');\n  }\n}\n\n@val()\nexport class Element implements IElement {\n  @IsDefined()\n  public _id: any;\n  public elements: Elements;\n  public static elements: Elements;\n  public getElements(): Elements {\n    return Element.elements;\n  }\n  public setFactory(elements) {\n    this.elements = elements;\n  }\n  public validate(): Promise<ValidationError[]> {\n    return this.elements.validate(this);\n  }\n  public toDbObject(): any {\n    let that = _.clone(this);\n    Object.keys(that).forEach((key) => {\n      // check if the property is a reference\n      let isReference = Reflect.getMetadata('elements:modelref', that, key);\n      if (isReference && that[key] && that[key]._id) {\n        that[key] = that[key]._id;\n      }\n      // check if is defined\n      let isDefined = Reflect.getMetadata('design:type', that, key);\n      console.log(key, isDefined);\n      if (!isDefined) {\n        delete that[key];\n      }\n    });\n    return that;\n  }\n}\n"],"sourceRoot":"/source/"}